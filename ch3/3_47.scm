; Assuming we have mutexes.
(define (make-semaphore n)
  (let ((lock (make-mutex))
        (count 0))
    (define (acquire)
      (lock 'acquire)
      (if (< count n)
        (begin (set! count (+ count 1))
               (lock 'release))
        (begin (lock 'release)
               (acquire))))
    (define (release)
      (lock 'acquire)
      (set! count (- count 1))
      (lock 'release))
    (define (semaphore m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))))
    semaphore))

; Assuming we have atomic test-and-set! operations.
(define (test-and-set! cell)
  (if (car cell)
    true
    (begin (set-car! cell true)
           false)))

(define (clear! cell)
  (set-car! cell false))

(define (make-semaphore n)
  (let ((cell (list false))
        (count 0))
    (define (acquire)
      (if (test-and-set! cell)
        (acquire))
      (if (< count n)
        (begin (set! count (+ count 1))
               (clear! cell))
        (begin (clear! cell)
               (acquire))))
    (define (release)
      (if (test-and-set! cell)
        (release))
      (set! count (- count 1))
      (clear! cell))
    (define (semaphore m)
      (cond ((eq? m 'acquire) (acquire))
            ((eq? m 'release) (release))))
    semaphore))
