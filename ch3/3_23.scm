(define (make-node item)
  (cons item (cons '() '())))
(define (node-item node) (car node))
(define (node-next node) (cadr node))
(define (node-prev node) (cddr node))
(define (node-set-next! node next) (set-car! (cdr node) next))
(define (node-set-prev! node prev) (set-cdr! (cdr node) prev))

(define (make-deque)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (empty-deque?)
      (null? front-ptr))
    (define (front-deque)
      (if (empty-deque?)
        (error "FRONT called with an empty deque" deque)
        (node-item front-ptr)))
    (define (rear-deque)
      (if (empty-deque?)
        (error "REAR called with an empty deque" deque)
        (node-item rear-ptr)))
    (define (front-insert-deque! item)
      (let ((new-node (make-node item)))
        (cond ((empty-deque?)
               (set! front-ptr new-node)
               (set! rear-ptr new-node))
              (else
                (node-set-next! new-node front-ptr)
                (node-set-prev! front-ptr new-node)
                (set! front-ptr new-node)))))
    (define (rear-insert-deque! item)
      (let ((new-node (make-node item)))
        (cond ((empty-deque?)
               (set! front-ptr new-node)
               (set! rear-ptr new-node))
              (else
                (node-set-prev! new-node rear-ptr)
                (node-set-next! rear-ptr new-node)
                (set! rear-ptr new-node)))))
    (define (front-delete-deque!)
      (if (empty-deque?)
        (error "DELETE called with an empty deque" deque)
        (begin (set! front-ptr (node-next front-ptr))
               (if (null? front-ptr)
                 (set! rear-ptr '())
                 (node-set-prev! front-ptr '())))))
    (define (rear-delete-deque!)
      (if (empty-deque?)
        (error "DELETE called with an empty deque" deque)
        (begin (set! rear-ptr (node-prev rear-ptr))
               (if (null? rear-ptr)
                 (set! front-ptr '())
                 (node-set-next! rear-ptr '())))))
    (define (print-deque)
      (define (iter ptr result)
        (if (null? ptr)
          result
          (iter (node-prev ptr) (cons (node-item ptr) result))))
      (newline)
      (display (iter rear-ptr '())))

    (define (dispatch m)
      (cond ((eq? m 'empty-deque?) (empty-deque?))
            ((eq? m 'front-deque) (front-deque))
            ((eq? m 'rear-deque) (rear-deque))
            ((eq? m 'front-insert-deque!) front-insert-deque!)
            ((eq? m 'rear-insert-deque!) rear-insert-deque!)
            ((eq? m 'front-delete-deque!) (front-delete-deque!))
            ((eq? m 'rear-delete-deque!) (rear-delete-deque!))
            ((eq? m 'print-deque) (print-deque))
            (else (error "Undefined operation -- DEQUE" m))))
    dispatch))

(define (empty-deque? deque) (deque 'empty-deque?))
(define (front-deque? deque) (deque 'front-deque))
(define (rear-deque? deque) (deque 'rear-deque))
(define (front-insert-deque! deque item) ((deque 'front-insert-deque!) item))
(define (rear-insert-deque! deque item) ((deque 'rear-insert-deque!) item))
(define (front-delete-deque! deque) (deque 'front-delete-deque!))
(define (rear-delete-deque! deque) (deque 'rear-delete-deque!))
(define (print-deque deque) (deque 'print-deque))
