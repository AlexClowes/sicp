(define (make-combination procedure arguments)
  (cons procedure arguments))

(define (make-definition variable value)
  (list 'define variable value))

(define (let? exp) (tagged-list? exp 'let))
(define (named-let? exp) (variable? (cadr exp)))
(define (named-let-name exp) (cadr exp))
(define (let-bindings exp)
  (if (named-let? exp)
    (caddr exp)
    (cadr exp)))
(define (let-body exp)
  (if (named-let? exp)
    (cdddr exp)
    (cddr exp)))
(define (binding-variable binding) (car binding))
(define (binding-expression binding) (cadr binding))
(define (let->combination exp)
  (let* ((bindings (let-bindings exp))
         (procedure (make-lambda (map binding-variable bindings)
                                 (let-body exp))))
    (if (named-let? exp)
      (make-begin (list (make-definition (named-let-name exp)
                                         procedure)
                        (make-combination (named-let-name exp)
                                          (map binding-expression bindings))))
      (make-combination procedure body))))
